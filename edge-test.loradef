{
    "type": "",
    "resources": "{\n    \"3/0/11\": {\n        \"description\": \"Error code (1=battery low, 0=OK)\",\n        \"mode\": \"r\",\n        \"defaultValue\": \"0\"\n    },\n    \"3300/0/5542\": {\n        \"description\": \"Number of dispenses left\",\n        \"mode\": \"r\",\n        \"defaultValue\": \"0\"\n    },\n    \"3300/0/5521\": {\n        \"description\": \"LoRa send interval\",\n        \"mode\": \"w\"\n    },\n    \"3300/0/5518\": {\n        \"description\": \"Timestamp of the message (as received by the LoRa network)\",\n        \"mode\": \"r\",\n        \"defaultValue\": \"0\"\n    },\n    \"3311/0/5706\": {\n        \"description\": \"Color of the RGB LED (string, as in ff00ff)\",\n        \"mode\": \"w\"\n    }\n}",
    "processData": "function (bytes) {\n    return {\n        \"3300/0/5542\": (bytes[0] << 8) + bytes[1],\n        \"3/0/11\": bytes[2] === 1 ? 1 : 0,\n        \"3300/0/5518\": new Date().toISOString()\n    };\n}",
    "writeData": "{\n    \"3300/0/5521\": function (v) {\n        // setting the interval (it's a number, encode in 2 bytes)\n        var b = Number(v);\n        return { port: 5, data: [ (b >> 8) & 0xff, b & 0xff ] };\n    },\n    \"3311/0/5706\": function (v) {\n        // comes in as ff00ff -> turn into hex and send as individual bytes\n        var hex = parseInt(v, 16);\n        return { port: 6, data: [ hex >> 16 & 0xff, hex >> 8 & 0xff, hex & 0xff ] };\n    }\n}"
}